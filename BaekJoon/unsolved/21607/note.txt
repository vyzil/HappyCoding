# 0001.c
ChatGPT가 코드를 잘 짤까라는 의문에 대한 답을 얻고자
부계정으로 ChatGPT가 짜준 코드를 넣으려고 했다가, 본계정으로 넣어서 꼭 풀어야 되는 문제가 되었다..

https://azber.tistory.com/6
조금 생각해보고 출제자의 풀이도 봤었는데,
우선 "세그트리로 함수 횟수만 적어놓기" 정도는 맞은 것 같다.

레이지 세그트리와, binary jumping에 대해서 엣날에 어디서 본 기억과 이름을 통해 추론해서 마저 풀어보자..

1. Lazy 
레이지 세그트리 > 느리게 갱신되는 세그트리 (백준 Book 에서 본거같다.)
개념은 대충, "아 이따가 한다구요~" 느낌.
내 행정처리마냥 꼭 필요할 때 처리하는 방식으로 코드를 작성하면 된다.

구간 업데이트라서, 최하단 노드에 갈 일이 생기면 그때 업데이트 하는 느낌

2. Binary Jumping
링크의 글만봐도 거듭제곱할때의 trick을 사용하는 것 같다.
0 <= x < 100,003 이고 0 <= k < 20
모든 정의역에 대해서 f(x)값을 구하기
아마 소수 모듈러 체계라서 제곱할때마다 치역?이 줄어들텐데,,, 아 제곱이 아니라 합성이지
아무튼 합성도 비슷한가?
[0] : f(x)
[1] : f^2(x)
[2] : f^4(x)
[3] : f^8(x)

재활용 하려고 했는데, 안될 것 같기도..?
진짜 계산 해야하나?

예를 들어 f^4(7)을 구하고 싶다 -> f^2(f^2(7)) 이렇게 두번?
흠..
x -> f(x)
f^(2k)(x) -> f^k(f^k(x)) -> 2번 참조 
생성하는데 독립적이구만 굳

링크에서 0 <= k < 20 까지만 만들어도 된다고 했으니
20 * 100,003 * 2 * (4 byte) => (대충 메모리 초과가 안나는) KB

-- 
요약하면, 
레이지 세그트리로 관리하고
쿼리가 들어오면 
    - f, q 몇번하는지 파악하고
    - 계산 : 각 함수 최대 20번 값 searching해서 
