# 0001.c

1 <= N <= 500,000
키 < 2^31 (signed int 범위 내)

N
N개의 키

볼 수 있는 쌍 출력

---

segTree => 임의의 A, B 사이에 최대값을 안다
그 최대값과 A B 비교
    흠.. 
    A와 B를 포함해서 하는 경우)
    두 사람 사이에 A 또는 B보다 키가 큰 사람이 없어야 한다.
    -> !(A < MAX || B < MAX) <=> (A >= MAX && B >= MAX)
    A와 B를 포함해서 MAX 값 구해도 ㄱㅊ 

쌍의 수 : 조합 N_C_2 = 124,999,750,000 절대 x

---
최댓값의 index를 segTree에 저장

N개의 줄
0 1 2 3 4 5 6
2차원 DP ? 
1. 인접 2명씩 묶기, 조건 만족하는 인원, 최댓값 저장
2. 인접 3명씩 묶기, 최댓값 저장


1, K-1
2, K-2
3, K-3
..

K-1, 1
인접 K명씩 묶기
1명 :
2명 최댓값
3명 최댓값
-> N, N-1, N-2 ... -> N^2

쌍 기준으로 계산하는 방법)
A와 B 사이에서 최대값이 A또는 B보다 크면 그 쌍은 안됨
쌍 갯수가 너무 많음

특정 범위내에 가능한 쌍의 수를 출력하는게 좋을듯
이것도 가장 긴 친구의 index를 저장하고, 범위
---

DP[i]
-> 이전까지 쌍 + i가 추가될때 늘어나는 쌍으 수

segTree에서 사람 기준으로 그 안의 최고 높이를 idx로 가져옴
