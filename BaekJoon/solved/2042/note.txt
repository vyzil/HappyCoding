# Feedback
여기서 비재귀로 작성만하면 진짜 끝일듯..?
비재귀 생각만 해보자
일단 함수들마다 local 변수도 필요 없어서 stack 도 필요 없을수도?

# Feedback -> 0003.c (solve, 17504 KB, 348 ms)
생각해보면, inputArr도 들고있을 필요가 없는거같음
make Tree에서는 쭉 내려가서 같으면 scanf해서 넣고,
update 에서는 쭉 내려가면서 같으면 update 하고, 다시 돌아오면서 수정하고

# 오류 수정
TreeSize 를 필요한거의 2배로 잘못 설정했었음 수정하니까 많이 줄어듬
0001.c (solve, 33136 KB, 364 ms)
0002.c (solve, 25320 KB, 348 ms)

# Feedback -> 0002.c (solve, 41704 KB, 372 ms)
세그먼트 트리 첫 구현이라 정확히 모르겠다

재귀 구현을 별로 안좋아하지만, 재귀가 역시 코드가 매우 간단해진다..
초반 Tree를 생성할 때, rootNode 부터 시작해서 accum buffer를 생성한게 좀 걸림
-> 그냥 재귀호출로 leaf Node까지 간담에 올라오면서 값 저장하는 방식으로 다시 구현해보자

다만, 객체 구현이 가능하면 좋을 것 같다는 생각이 들었다
-> C++을 사용 해야하나..



# 0001 (solve, 49520 KB, 356ms)
1 <= N <= 1,000,000     -> 수
1 <= M <= 10,000        -> 수 변경 횟수
1 <= K <= 10,000        -> 구간합 횟수


N개의 수 주어짐.

a b c 가 M + K개 주어짐
1 : b번째 수 -> c로 변경
2 : b ~ c 까지 구간합 출력

--- 
세그먼트 트리 개념)

구간 합 : 
1 2 3 4 5 가 들어온다?

input 저장
0 1 2 3 4
1 2 3 4 5

sum array 생성 누적합 저장
0 1 2 3  4 
1 3 6 10 15

(0, 2), (3, 4) 로 나누기
(0, 2) : [2] - [0-1] = 6       //(if < 0 : 0)
(3, 4) : [4] - [3-1] = 9

이런식으로 계산해서 트리 구성하기

트리가 구성되면, 
1. 수정 : 
input이랑 비교해서 +인지 -인지 파악,
구간이 포함된 트리 호출하면서 업데이트
input을 새로운 값으로 업데이트


2. 구간합 : 내려가면서 return 값 더하기

